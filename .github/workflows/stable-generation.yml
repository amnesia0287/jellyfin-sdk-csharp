name: Generate stable API 

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./stable
    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
    steps:
    - uses: actions/checkout@v2.3.4
      with:
        ref: 'master'
    - uses: actions/setup-dotnet@v1.8.2
      with:
        dotnet-version: '5.0.x'
    - uses: actions/setup-dotnet@v1.8.2
      with:
        dotnet-version: '3.1.x'

    - name: Restore packages
      run: dotnet restore

    - name: Get OpenApi version
      id: apiversion
      run: echo "::set-output name=number::$(curl -s https://api.jellyfin.org/openapi/jellyfin-openapi-stable.json | jq '.info.version')"

    - name: Create new version string
      id: version
      run: echo "::set-output name=number::$(echo ${{ steps.apiversion.outputs.number }})"

    - name: Install dotnet-setversion
      run: dotnet tool install -g dotnet-setversion
    
    - name: Set project version
      run: setversion ${{steps.version.outputs.number}}

    - name: Generate sdk
      run: dotnet msbuild -target:GenerateSdk

    - name: Check if generated client files were modified
      id: diff
      run: echo "::set-output name=count::$(git status -s | grep cs | grep -v csproj | wc -l)"

    - name: Build packages
      if: ${{ steps.diff.outputs.count > 0 }}
      run: dotnet build -c Release

    - name: Publish to nuget
      if: ${{ steps.diff.outputs.count > 0 }}
      run: dotnet nuget push bin/Release/*.nupkg --api-key ${{ secrets.NUGET_APIKEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

    - name: Commit new changes to the repo
      if: ${{ steps.diff.outputs.count > 0 }}
      run: |
        git config user.name jellyfin-bot
        git config user.email team@jellyfin.org
        git pull
        git add .
        git commit --allow-empty -m "Update stable OpenAPI client"
        git push

    - name: Build all sample projects
      if: ${{ steps.diff.outputs.count > 0 }}
      run: find ../samples -type f -name "*.csproj" -exec dotnet build {} \;